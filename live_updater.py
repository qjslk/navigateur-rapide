#!/usr/bin/env python3
"""
Syst√®me de mise √† jour en temps r√©el pour Retrosoft
T√©l√©charge automatiquement les fichiers Python modifi√©s depuis GitHub
"""

import requests
import json
import os
import sys
import tempfile
import shutil
from pathlib import Path
from PyQt6.QtWidgets import QMessageBox
from PyQt6.QtCore import QThread, pyqtSignal, QTimer
import logging

class LiveUpdateChecker(QThread):
    """Thread pour v√©rifier les mises √† jour de code en temps r√©el"""
    
    files_updated = pyqtSignal(list)  # Signal √©mis quand des fichiers sont mis √† jour
    no_update = pyqtSignal()
    error_occurred = pyqtSignal(str)
    
    def __init__(self, current_version="1.0.0"):
        super().__init__()
        self.current_version = current_version
        self.github_repo = "qjslk/navigateur-rapide"
        self.github_api_url = f"https://api.github.com/repos/{self.github_repo}"
        self.files_to_monitor = [
            "navigateur.py",
            "version.py", 
            "updater.py",
            "accueil.html"
        ]
        
    def run(self):
        """V√©rifier s'il y a des fichiers modifi√©s sur GitHub"""
        try:
            updated_files = []
            
            for filename in self.files_to_monitor:
                if self.check_file_updated(filename):
                    updated_files.append(filename)
            
            if updated_files:
                self.files_updated.emit(updated_files)
            else:
                self.no_update.emit()
                
        except Exception as e:
            self.error_occurred.emit(f"Erreur de v√©rification: {str(e)}")
    
    def check_file_updated(self, filename):
        """V√©rifier si un fichier sp√©cifique a √©t√© modifi√©"""
        try:
            # R√©cup√©rer les informations du fichier depuis GitHub
            url = f"{self.github_api_url}/contents/{filename}"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                github_data = response.json()
                github_sha = github_data["sha"]
                
                # Comparer avec le SHA local (si existe)
                local_sha_file = f".{filename}.sha"
                if os.path.exists(local_sha_file):
                    with open(local_sha_file, 'r') as f:
                        local_sha = f.read().strip()
                    
                    return github_sha != local_sha
                else:
                    # Premi√®re fois, consid√©rer comme mise √† jour
                    return True
            
            return False
            
        except Exception as e:
            logging.error(f"Erreur lors de la v√©rification de {filename}: {e}")
            return False

class LiveFileDownloader(QThread):
    """Thread pour t√©l√©charger les fichiers mis √† jour"""
    
    download_finished = pyqtSignal(list)  # Liste des fichiers t√©l√©charg√©s
    error_occurred = pyqtSignal(str)
    
    def __init__(self, files_to_download):
        super().__init__()
        self.files_to_download = files_to_download
        self.github_repo = "qjslk/navigateur-rapide"
        self.github_raw_url = f"https://raw.githubusercontent.com/{self.github_repo}/main"
        
    def run(self):
        """T√©l√©charger les fichiers mis √† jour"""
        try:
            downloaded_files = []
            
            for filename in self.files_to_download:
                if self.download_file(filename):
                    downloaded_files.append(filename)
            
            if downloaded_files:
                self.download_finished.emit(downloaded_files)
            else:
                self.error_occurred.emit("Aucun fichier n'a pu √™tre t√©l√©charg√©")
                
        except Exception as e:
            self.error_occurred.emit(f"Erreur de t√©l√©chargement: {str(e)}")
    
    def download_file(self, filename):
        """T√©l√©charger un fichier sp√©cifique"""
        try:
            # URL du fichier brut sur GitHub
            file_url = f"{self.github_raw_url}/{filename}"
            response = requests.get(file_url, timeout=30)
            
            if response.status_code == 200:
                # Sauvegarder le fichier
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(response.text)
                
                # Sauvegarder le SHA pour la prochaine v√©rification
                sha_url = f"https://api.github.com/repos/{self.github_repo}/contents/{filename}"
                sha_response = requests.get(sha_url, timeout=10)
                if sha_response.status_code == 200:
                    sha_data = sha_response.json()
                    with open(f".{filename}.sha", 'w') as f:
                        f.write(sha_data["sha"])
                
                logging.info(f"Fichier {filename} mis √† jour avec succ√®s")
                return True
            
            return False
            
        except Exception as e:
            logging.error(f"Erreur lors du t√©l√©chargement de {filename}: {e}")
            return False

class LiveUpdater:
    """Gestionnaire principal des mises √† jour en temps r√©el"""
    
    def __init__(self, parent_window, current_version="1.0.0"):
        self.parent = parent_window
        self.current_version = current_version
        self.checker = None
        self.downloader = None
        
        # Timer pour v√©rifications p√©riodiques
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self.check_for_updates_silent)
        
    def start_live_updates(self, interval_minutes=5):
        """D√©marrer les mises √† jour automatiques p√©riodiques"""
        # V√©rification initiale
        self.check_for_updates_silent()
        
        # V√©rifications p√©riodiques
        self.update_timer.start(interval_minutes * 60 * 1000)  # Convertir en millisecondes
        logging.info(f"Mises √† jour automatiques activ√©es (v√©rification toutes les {interval_minutes} minutes)")
    
    def stop_live_updates(self):
        """Arr√™ter les mises √† jour automatiques"""
        self.update_timer.stop()
        logging.info("Mises √† jour automatiques d√©sactiv√©es")
    
    def check_for_updates_silent(self):
        """V√©rifier les mises √† jour en mode silencieux"""
        if self.checker and self.checker.isRunning():
            return  # Une v√©rification est d√©j√† en cours
            
        self.checker = LiveUpdateChecker(self.current_version)
        self.checker.files_updated.connect(self.on_files_updated)
        self.checker.no_update.connect(self.on_no_update_silent)
        self.checker.error_occurred.connect(self.on_error_silent)
        self.checker.start()
    
    def check_for_updates_manual(self):
        """V√©rifier les mises √† jour manuellement (avec messages)"""
        if self.checker and self.checker.isRunning():
            QMessageBox.information(
                self.parent,
                "V√©rification en cours",
                "Une v√©rification de mise √† jour est d√©j√† en cours..."
            )
            return
            
        self.checker = LiveUpdateChecker(self.current_version)
        self.checker.files_updated.connect(self.on_files_updated_manual)
        self.checker.no_update.connect(self.on_no_update_manual)
        self.checker.error_occurred.connect(self.on_error_manual)
        self.checker.start()
    
    def on_files_updated(self, updated_files):
        """Fichiers mis √† jour d√©tect√©s (mode silencieux)"""
        self.download_updates(updated_files, silent=True)
    
    def on_files_updated_manual(self, updated_files):
        """Fichiers mis √† jour d√©tect√©s (mode manuel)"""
        reply = QMessageBox.question(
            self.parent,
            "Mises √† jour disponibles",
            f"üîÑ {len(updated_files)} fichier(s) mis √† jour d√©tect√©(s):\n\n" +
            "\n".join([f"‚Ä¢ {f}" for f in updated_files]) +
            "\n\nVoulez-vous t√©l√©charger et appliquer ces mises √† jour?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            self.download_updates(updated_files, silent=False)
    
    def on_no_update_silent(self):
        """Aucune mise √† jour (mode silencieux)"""
        logging.info("Aucune mise √† jour disponible")
    
    def on_no_update_manual(self):
        """Aucune mise √† jour (mode manuel)"""
        QMessageBox.information(
            self.parent,
            "Pas de mise √† jour",
            "‚úÖ Tous vos fichiers sont √† jour!"
        )
    
    def on_error_silent(self, error_message):
        """Erreur de v√©rification (mode silencieux)"""
        logging.warning(f"Erreur de v√©rification des mises √† jour: {error_message}")
    
    def on_error_manual(self, error_message):
        """Erreur de v√©rification (mode manuel)"""
        QMessageBox.warning(
            self.parent,
            "Erreur de v√©rification",
            f"‚ùå Impossible de v√©rifier les mises √† jour:\n{error_message}"
        )
    
    def download_updates(self, files_to_update, silent=True):
        """T√©l√©charger les mises √† jour"""
        if self.downloader and self.downloader.isRunning():
            return  # Un t√©l√©chargement est d√©j√† en cours
            
        self.downloader = LiveFileDownloader(files_to_update)
        self.downloader.download_finished.connect(
            lambda files: self.on_download_finished(files, silent)
        )
        self.downloader.error_occurred.connect(
            lambda error: self.on_download_error(error, silent)
        )
        self.downloader.start()
    
    def on_download_finished(self, downloaded_files, silent):
        """T√©l√©chargement termin√©"""
        if not silent:
            QMessageBox.information(
                self.parent,
                "Mise √† jour termin√©e",
                f"‚úÖ {len(downloaded_files)} fichier(s) mis √† jour:\n\n" +
                "\n".join([f"‚Ä¢ {f}" for f in downloaded_files]) +
                "\n\nüîÑ Red√©marrez l'application pour appliquer les changements."
            )
        else:
            # Notification discr√®te dans les logs
            logging.info(f"Mise √† jour automatique: {len(downloaded_files)} fichier(s) mis √† jour")
            
            # Optionnel: notification syst√®me
            if hasattr(self.parent, 'show_notification'):
                self.parent.show_notification(
                    "Retrosoft mis √† jour",
                    f"{len(downloaded_files)} fichier(s) mis √† jour automatiquement"
                )
    
    def on_download_error(self, error_message, silent):
        """Erreur de t√©l√©chargement"""
        if not silent:
            QMessageBox.critical(
                self.parent,
                "Erreur de mise √† jour",
                f"‚ùå Erreur lors de la mise √† jour:\n{error_message}"
            )
        else:
            logging.error(f"Erreur de mise √† jour automatique: {error_message}")

# Fonction utilitaire pour int√©grer facilement dans l'application principale
def setup_live_updater(main_window, version="1.0.0", auto_check_minutes=5):
    """Configure le syst√®me de mise √† jour en temps r√©el"""
    updater = LiveUpdater(main_window, version)
    
    # D√©marrer les mises √† jour automatiques
    updater.start_live_updates(auto_check_minutes)
    
    return updater